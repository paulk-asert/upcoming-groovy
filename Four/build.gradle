repositories {
    mavenCentral()
//    mavenLocal()
}

dependencies {
    implementation "org.apache.groovy:groovy-all:4.0.2"
    implementation "org.apache.groovy:groovy-contracts:4.0.2"
    implementation "org.apache.groovy:groovy-toml:4.0.2"
    implementation "org.apache.groovy:groovy-ginq:4.0.2"
    implementation "org.apache.groovy:groovy-macro-library:4.0.2"
    implementation "org.apache.groovy:groovy-typecheckers:4.0.2"
    implementation "net.jqwik:jqwik:1.6.5"
//    runtime "commons-cli:commons-cli:1.4"
}


def isCandidate(String name) {
    !name.contains('Snippet')
            && name.contains('JDK16').implies(JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16))
            && name.contains('JDK17').implies(JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17))
}

task runScripts(dependsOn: 'compileGroovy') {
    description = 'run all scripts in src/main/resources'
    doLast {
        file('src/main/resources').eachFile { script ->
            String name = script.name
            if (!isCandidate(name)) {
                ant.echo "Skipping $name"
            } else {
                ant.echo "Executing $name"
                if (name.endsWith('.java')) {
                    def path = 'build/classes/groovy/main/'
                    ant.echo "Compiling $script"
                    ant.javac(srcdir: script.parent, destdir: path, classpath: path, includeantruntime: false) {
                        include(name: name)
                    }
                    javaexec {
                        classpath = files(path)
                        main = name - '.java'
                    }
                } else {
                    javaexec {
                        classpath = sourceSets.main.runtimeClasspath
                        mainClass = 'groovy.ui.GroovyMain'
                        args = [script.path]
                    }
                }
            }
        }
    }
}

task console(type: JavaExec) {
    main = 'groovy.console.ui.Console'
    classpath = sourceSets.main.runtimeClasspath
}

FileUtil.baseNames(file('src/main/resources').listFiles().findAll{ isCandidate(it.name) }).each { name ->
    task "run$name"(type: JavaExec) {
        group 'Script'
        description "Run ${name}.groovy as a JVM application/Groovy script"
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'groovy.ui.GroovyMain'
        args = ["src/main/resources/${name}.groovy"]
    }
}
